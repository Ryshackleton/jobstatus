{"version":3,"sources":["components/JobStatusPoller/jobStateReducer.js","components/Canvas/Canvas2d.js","hooks/useCanvas.js","components/Canvas/ResponsiveCanvas.js","components/Tooltip/Tooltip.js","components/DotBarChart/utils/computeIndexedNodes.js","components/DotBarChart/utils/computeLayout.js","components/DotBarChart/utils/drawDotBarFunction.js","components/DotBarChart/utils/drawLabelsFunction.js","components/DotBarChart/DotBarChart.js","components/JobStatusPoller/JobStatusPoller.js","hooks/useInterval.js","components/Title/Title.js","utils/fetch.js","containers/ApiJobStatus/fetchFromApi.js","containers/ApiJobStatus/ApiJobStatus.js","containers/DemoWorkflowStatus/demoDataGenerator.js","containers/DemoWorkflowStatus/DemoWorkflowStatus.js","serviceWorker.js","index.js","App.js"],"names":["jobStateReducer","state","action","type","Object","objectSpread","nodes","payload","_action$payload","colorPropName","groupMetadataArray","groupPropName","labelPropName","groupMetadata","reduce","acc","meta","defineProperty","colorRange","map","groupKeys","groupLabels","colorScale","scaleOrdinal","domain","range","colorAccessor","node","has","Error","Canvas2d","_ref","click","_ref$drawFunction","drawFunction","_ref$height","height","_ref$width","width","_ref$canvasPixelRatio","canvasPixelRatio","mousedown","mousemove","mouseup","_ref$style","style","touchend","touchmove","touchstart","canvasRef","draw","ratio","arguments","length","undefined","useRef","useEffect","canvas","current","ctx","getContext","animationFrameId","requestAnimationFrame","clearRect","save","scale","restore","cancelAnimationFrame","useCanvas","sizeInPixels","concat","react_default","a","createElement","ref","onTouchStart","onTouchMove","onTouchEnd","onMouseMove","onMouseDown","onMouseUp","onClick","ResponsiveCanvas","_ref$canvasStyle","canvasStyle","_ref$canvasDrawFuncti","canvasDrawFunction","eventCanvasDrawFunction","_ref$eventCanvasStyle","eventCanvasStyle","position","top","left","opacity","_ref$wrapperClassName","wrapperClassName","wrapperSizeRef","_ref$wrapperStyle","wrapperStyle","touchCanvas","touchStyles","pointerEvents","className","Tooltip","borderWidth","content","contentWidth","font","padding","bottom","borderStyle","borderColor","marginLeft","color","backgroundColor","border","borderRadius","zIndex","computeIndexedNodes","_ref$uniqueIdPropName","uniqueIdPropName","_ref$groupIndexPropNa","groupIndexPropName","groupCounts","Array","isArray","key","colorToNode","nodeIdToColor","indexed","index","_objectSpread3","group","_node$uniqueIdPropNam","id","groupIndex","uniqueColor","computeLayout","_ref2","_ref2$bandPaddingInne","bandPaddingInner","_ref2$bandPaddingOute","bandPaddingOuter","_ref2$isHangingBar","isHangingBar","_ref2$groupIndexPropN","_ref2$margin","margin","right","nodeCount","_ref2$radiusToPadding","radiusToPaddingRatio","xScale","scaleBand","paddingInner","paddingOuter","radiusWithPadding","bandwidth","maxNodesPerBar","areaPerSquare","Math","sqrt","optRadius","radius","diameter","outerSpace","step","nNodesPerRow","ceil","yRange","yScale","scaleLinear","reverse","radiusAccessor","xAccessor","xOff","floor","yAccessor","rowN","drawDotBarFunction","_ref$strokeColorAcces","strokeColorAccessor","_ref$strokeWidth","strokeWidth","_ref$strokeLineJoin","strokeLineJoin","forEach","d","path2","Path2D","x","y","l","pre","circlePath","strokeStyle","lineWidth","lineJoin","stroke","fillStyle","fill","drawLabelsFunction","_ref$font","_ref$fontSecondary","fontSecondary","_ref$fontStrokeColor","fontStrokeColor","_ref$fontStrokeWidth","fontStrokeWidth","labels","_ref$numberOffset","numberOffset","counts","total","values","sum","count","i","textAlign","textBaseline","fillText","strokeText","percent","percentPrecise","toPrecision","round","progressLabel","stateReducer","isRendering","DotBarChart","_ref$bandPaddingInner","_ref$bandPaddingOuter","_ref$circleStrokeColo","circleStrokeColor","circleStrokeWidth","background","_ref$isHangingBar","labelColorAccessor","_ref$labelFont","labelFont","_ref$labelFontSeconda","labelFontSecondary","_ref$margin","_ref$radiusToPaddingR","_useResizeObserver","useResizeObserver","_useResizeObserver2","slicedToArray","sizeRef","_useReducer","useReducer","tooltipContent","tooltipContentWidth","tooltipOffset","_useReducer2","dispatch","_computeLayout","_computeIndexedNodes","dotBarDrawFunction","dotBarDraw","labelDraw","labelDrawFunction","Fragment","e","event","hiddenCtx","target","rgb","getImageData","nativeEvent","offsetX","offsetY","data","renderProps","omit","maxWidth","value","measureText","pageX","pageY","JobStatusPoller","_ref$colorPropName","fetchMetadataPromise","fetchNodesPromise","_ref$groupPropName","_ref$labelPropName","_ref$pollingInterval","pollingInterval","_fetchData","asyncToGenerator","regenerator_default","mark","_callee","_ref3","wrap","_context","prev","next","sent","stop","apply","this","fetchData","callback","delay","savedCallback","setInterval","clearInterval","useInterval","then","_ref4","titleString","Title","fetchTitlePromise","t0","t1","t2","slug","params","keys","fetchJSON","_x","_fetchJSON","url","_ref$params","response","fetch","headers","Accept","credentials","ok","abrupt","json","status","fetchNodeMetadata","jobStatusMetaData","job_statuses_dict","toArray","label","rest","objectWithoutProperties","sort_order","sort","b","fetchNodes","_ref6","_callee2","_ref5","_ref7","jobs","_context2","shift","val","_x2","fetchTitle","_ref9","_callee3","_ref8","job_id","_ref10","workflow_dcts","jobMetadata","workflowName","workflowUser","_context3","isNil","find","job","dag_id","workflow_args","user","_x3","ApiJobStatus","match","baseUrl","port","Number","urlString","bind","title","jobStatusComponent","getFakeProgress","numberToAdvance","random","indicesToAdvance","includes","findIndex","nextGroupIndex","randomErrorState","defaultGroupMetadata","group_id","DemoWorkflowStatus","_ref$className","_ref$match","nNodes","unique_id","some_other_prop","Boolean","window","location","hostname","ReactDOM","render","_ref$baseUrl","process","_ref$port","_ref$routeName","routeName","react_router_dom","react_router","path","exact","matchProps","assign","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1c69bd02.chunk.js","sourcesContent":["import { scaleOrdinal } from 'd3-scale';\nimport { has } from 'lodash-es';\n\nconst jobStateReducer = (state, action) => {\n  switch(action.type) {\n    case 'SET_NODES':\n      return { ...state, nodes: action.payload };\n    case 'SET_GROUP_METADATA':\n      const {\n        colorPropName,\n        groupMetadataArray,\n        groupPropName,\n        labelPropName,\n      } = action.payload;\n\n      const groupMetadata = groupMetadataArray\n        .reduce((acc, meta) => ({ ...acc, [meta[groupPropName]]: meta }), {});\n      const colorRange = groupMetadataArray.map(meta => meta[colorPropName]);\n      const groupKeys = groupMetadataArray.map(meta => meta[groupPropName]);\n      const groupLabels = groupMetadataArray.map(meta => meta[labelPropName]);\n\n      const colorScale = scaleOrdinal()\n        .domain(groupKeys)\n        .range(colorRange)\n      // dual use color accessor:\n      // takes either a node object where node = { [groupPropName]: 'someGroupId' }\n      // OR the group id itself: node = 'someGroupId'\n      const colorAccessor = node => {\n        return has(node, groupPropName)\n          ? colorScale(node[groupPropName])\n          : colorScale(node)\n      };\n\n      return { ...state, colorAccessor, groupMetadata, groupKeys, groupLabels };\n    default:\n      throw new Error('Invalid action type in jobStateReducer');\n  }\n};\n\nexport default jobStateReducer;\n","import React from 'react';\nimport  useCanvas from '../../hooks/useCanvas';\n\nexport default function Canvas2d({\n  click,\n  drawFunction = () => {},\n  height = 500,\n  width = 500,\n  canvasPixelRatio = 2,\n  mousedown,\n  mousemove,\n  mouseup,\n  style = {},\n  touchend,\n  touchmove,\n  touchstart,\n}) {\n  const canvasRef = useCanvas(drawFunction, canvasPixelRatio);\n  const sizeInPixels = { width: `${width}px`, height: `${height}px` };\n  return <canvas\n    width={width * canvasPixelRatio}\n    height={height * canvasPixelRatio}\n    style={{ ...sizeInPixels, ...style }}\n    ref={canvasRef}\n    onTouchStart={touchstart}\n    onTouchMove={touchmove}\n    onTouchEnd={touchend}\n    onMouseMove={mousemove}\n    onMouseDown={mousedown}\n    onMouseUp={mouseup}\n    onClick={click}\n  />;\n}\n\n","import { useRef, useEffect } from \"react\";\n\nexport default function useCanvas(draw, ratio = 1) {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    function renderFrame() {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.save();\n      ctx.scale(ratio, ratio);\n      draw(ctx);\n      ctx.restore();\n    }\n    const animationFrameId = requestAnimationFrame(renderFrame);\n\n    return () => cancelAnimationFrame(animationFrameId);\n  }, [draw]);\n\n  return canvasRef;\n}\n\n","import React from 'react';\nimport Canvas2d from './Canvas2d';\n\nexport default function ResponsiveCanvas({\n  click,\n  canvasPixelRatio = 2,\n  canvasStyle = {},\n  canvasDrawFunction = () => {},\n  eventCanvasDrawFunction,\n  eventCanvasStyle = { position: 'absolute', top: 0, left: 0, opacity: 0 },\n  height,\n  mousemove,\n  mousedown,\n  mouseup,\n  touchend,\n  touchmove,\n  touchstart,\n  width,\n  wrapperClassName = 'canvasWrapper',\n  wrapperSizeRef,\n  wrapperStyle = {},\n}) {\n  const touchCanvas = eventCanvasDrawFunction\n    ? <Canvas2d\n      canvasPixelRatio={canvasPixelRatio}\n      width={width}\n      height={height}\n      drawFunction={eventCanvasDrawFunction}\n      style={{ ...canvasStyle, ...eventCanvasStyle }}\n      touchstart={touchstart}\n      touchmove={touchmove}\n      touchend={touchend}\n      mousemove={mousemove}\n      mousedown={mousedown}\n      mouseup={mouseup}\n      click={click}\n    />\n    : '';\n  const touchStyles = eventCanvasDrawFunction\n    ? { pointerEvents: 'none' }\n    : {};\n  return <div\n    className={wrapperClassName}\n    ref={wrapperSizeRef}\n    style={{\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      ...wrapperStyle,\n    }}\n  >\n    {touchCanvas}\n    <Canvas2d\n      canvasPixelRatio={canvasPixelRatio}\n      width={width}\n      height={height}\n      drawFunction={canvasDrawFunction}\n      style={{ ...canvasStyle, ...touchStyles }}\n    />\n  </div>;\n};\n","import React from 'react';\n\nexport default function Tooltip({\n  borderWidth,\n  opacity,\n  content,\n  contentWidth,\n  left,\n  font,\n  padding,\n  top,\n}) {\n  return <div\n    className={'tooltipWrapper'}\n    style={{\n      position: 'absolute',\n      opacity,\n      top: `${top}px`,\n      left: `${left}px`,\n    }}\n  >\n    <span\n      className={'tooltipArrow'}\n      style={{\n        content: \"\",\n        position: 'absolute',\n        bottom: '100%',\n        left: '50%',\n        borderWidth: `-${borderWidth}px`,\n        borderStyle: 'solid',\n        borderColor: 'transparent transparent #999 transparent',\n      }}\n    />\n    <span\n      className={'tooltipContent'}\n      style={{\n        position: 'absolute',\n        padding: `${padding}px`,\n        width: `${contentWidth}px`,\n        top: '100%',\n        left: '50%',\n        marginLeft: `-${contentWidth / 2}px`, /* center the tooltip */\n        font: font,\n        color: '#000',\n        backgroundColor: '#fff',\n        border: '2px solid #999',\n        borderRadius: '5px',\n        pointerEvents: 'none',\n        opacity: 1,\n        zIndex: 1,\n      }}\n    >\n      {content}\n    </span>\n  </div>;\n}\n","import { reduce } from 'lodash-es';\n\nconst uniqueColor = (index) => {\n  return (index < 16777215)\n    ? `rgb(${index & 0xff},${(index & 0xff00) >> 8},${(index & 0xff0000) >> 16})`\n    : '';\n};\n\nexport default ({\n  nodes,\n  uniqueIdPropName = 'uniqueId',\n  groupPropName,\n  groupIndexPropName = 'groupIndex',\n  groupKeys,\n}) => {\n  const groupCounts = Array.isArray(groupKeys)\n    ? groupKeys.reduce((acc, key) => ({ ...acc, [key]: 0 }), {})\n    : {};\n\n  const colorToNode = {};\n  const nodeIdToColor = {};\n  const indexed = reduce(nodes, (acc, node, index) => {\n    const { [groupPropName]: group, [uniqueIdPropName]: id = index, } = node;\n    if(!groupCounts[group]) {\n      groupCounts[group] = 0;\n    }\n    const groupIndex = groupCounts[group]++;\n\n    // unique color (from http://bl.ocks.org/Jverma/70f7975a72358e6d69cdd4bf6a0569e7)\n    const color = uniqueColor(index + 1);\n    colorToNode[color] = node;\n    nodeIdToColor[id] = color;\n\n    acc[id] = {\n      ...node,\n      [uniqueIdPropName]: id,\n      [groupIndexPropName]: groupIndex,\n      [groupPropName]: group,\n    };\n    return acc;\n  }, {});\n  return { colorToNode, nodes: indexed, groupCounts, groupIndexPropName, nodeIdToColor };\n};\n","import { scaleBand, scaleLinear } from 'd3-scale';\n\nconst optRadius = ({ bandwidth, height, margin, maxNodesPerBar }) => {\n  // how much area do we have per bar\n  const totalBarArea = bandwidth * (height - margin.top - margin.bottom);\n  const areaPerSquare = totalBarArea / maxNodesPerBar;\n  // radius will be half the side of the square\n  return Math.sqrt(areaPerSquare) * 0.5;\n};\n\nexport default ({\n  bandPaddingInner = 0.5,\n  bandPaddingOuter = 0.7,\n  isHangingBar = true,\n  groupIndexPropName = 'groupIndex',\n  groupPropName,\n  groupKeys,\n  height,\n  margin = { top: 10, right: 10, bottom: 10, left: 10 },\n  nodeCount,\n  radiusToPaddingRatio = 0.9,\n  width,\n}) => {\n  // determine x scale based on the width and number of groups\n  const xScale = scaleBand()\n    .domain(groupKeys)\n    .range([margin.left, width - margin.right])\n    .paddingInner([bandPaddingInner])\n    .paddingOuter([bandPaddingOuter]);\n\n  // optimum radius and radius padding, given the amount of space we have\n  const radiusWithPadding = optRadius({\n    bandwidth: xScale.bandwidth(),\n    height,\n    maxNodesPerBar: nodeCount,\n    margin,\n    width,\n  });\n  // divide radius and padding up according to user defined ratio\n  const radius = radiusWithPadding * radiusToPaddingRatio;\n\n  // constants to compute the x and y positions from a node indexed by group\n  const diameter = radiusWithPadding * 2;\n  const outerSpace = xScale.step() * xScale.paddingOuter();\n  const nNodesPerRow = Math.ceil(xScale.bandwidth() / diameter);\n\n  const xAccessor = (node) => {\n    const xOff = (Math.floor(node[groupIndexPropName] % nNodesPerRow) * diameter) + radiusWithPadding - outerSpace;\n    return xScale(node[groupPropName])+ xOff;\n  };\n\n  const yRange = [height - margin.bottom, margin.top];\n  const yScale = scaleLinear()\n    .domain([0, height])\n    .range(isHangingBar ? yRange.reverse() : yRange);\n\n  const yAccessor = (node) => {\n    const rowN = Math.ceil((node[groupIndexPropName] + 1) / nNodesPerRow);\n    return yScale(rowN * diameter);\n  };\n\n  const radiusAccessor = () => (radius);\n\n  return {\n    radiusWithPadding,\n    radiusAccessor,\n    xAccessor,\n    xScale,\n    yAccessor,\n  };\n};\n","import { forEach } from 'lodash-es';\n\n// modified from flubber's src: https://github.com/veltman/flubber/blob/master/src/shape.js\nfunction circlePath(x, y, radius) {\n  /* eslint-disable prefer-template */\n  const l = x - radius + ',' + y;\n  const r = x + radius + ',' + y;\n  const pre = 'A' + radius + ',' + radius + ',0,1,1,';\n\n  return 'M' + l + pre + r + pre + l + 'Z';\n  /* eslint-enable prefer-template */\n}\n\nexport default ({\n  nodes,\n  colorAccessor,\n  radiusAccessor,\n  strokeColorAccessor = () => ('#aaa'),\n  strokeWidth = '2',\n  strokeLineJoin = 'round',\n  xAccessor,\n  yAccessor,\n}) => {\n  return (ctx) => {\n    forEach(nodes, (d) => {\n      const path2 = new Path2D(circlePath(xAccessor(d), yAccessor(d), radiusAccessor(d)));\n\n      // Node outline\n      if (strokeWidth > 0) {\n        ctx.strokeStyle = strokeColorAccessor(d);\n        ctx.lineWidth = strokeWidth;\n        ctx.lineJoin = strokeLineJoin;\n        ctx.stroke(path2);\n      }\n\n      // Node fill\n      ctx.fillStyle = colorAccessor(d);\n      ctx.fill(path2);\n    });\n  };\n}\n","\nexport default ({\n  colorAccessor,\n  font = '30px Arial',\n  fontSecondary = '20px Arial',\n  fontStrokeColor = '#aaa',\n  fontStrokeWidth = 0.25,\n  groupCounts,\n  groupKeys,\n  labels,\n  xAccessor,\n  yAccessor,\n  numberOffset = 20,\n}) => {\n  return (ctx) => {\n\n    let counts = [];\n    let total = 0;\n    if (groupCounts) {\n      counts = Object.values(groupCounts);\n      total = counts.reduce((sum, count) => (sum + count), 0);\n    }\n    if (groupKeys.length !== labels.length) {\n      return;\n    }\n    groupKeys.forEach(function(group, i) {\n      const x = xAccessor(group);\n      const y = yAccessor(group);\n      const color = colorAccessor(group);\n\n      ctx.font = font;\n      ctx.fillStyle = color;\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(labels[i], x, y);\n      ctx.lineWidth = fontStrokeWidth;\n      ctx.strokeStyle = fontStrokeColor;\n      ctx.strokeText(labels[i], x, y);\n\n      if (counts.length === labels.length) {\n        const percent = counts[i] / total * 100;\n        const percentPrecise = percent < 1 ? percent.toPrecision(1) : Math.round(percent);\n        const progressLabel = `${percentPrecise}% (${counts[i]})`;\n        ctx.font = fontSecondary;\n        ctx.fillText(progressLabel, x, y + numberOffset);\n        ctx.strokeText(progressLabel, x, y + numberOffset);\n      }\n    });\n  };\n}\n","import React, { useEffect, useReducer } from 'react';\nimport { omit, map, reduce } from 'lodash-es';\nimport useResizeObserver from \"use-resize-observer\";\nimport ResponsiveCanvas from '../../components/Canvas/ResponsiveCanvas';\nimport Tooltip from '../../components/Tooltip/Tooltip';\nimport computeIndexedNodes from './utils/computeIndexedNodes';\nimport computeLayout from './utils/computeLayout';\nimport dotBarDrawFunction from './utils/drawDotBarFunction';\nimport labelDrawFunction from './utils/drawLabelsFunction';\n\nexport const stateReducer = (state, action) => {\n  switch(action.type) {\n    case 'SET_TOOLTIP_CONTENT':\n      return { ...state, ...action.payload };\n    case 'SET_LAYOUT':\n      return { ...state, ...action.payload };\n    case 'START_RENDER':\n      return { ...state, isRendering: true };\n    case 'FINISH_RENDER':\n      return { ...state, isRendering: false };\n    default:\n      throw new Error('Invalid action type in progressReducer');\n  }\n};\n\nexport default function DotBarChart({\n  bandPaddingInner = 0.1,\n  bandPaddingOuter = 0.1,\n  className,\n  circleStrokeColor = '#aaa',\n  circleStrokeWidth,\n  colorAccessor,\n  canvasStyle = { background: 'transparent' },\n  eventCanvasStyle,\n  fontStrokeColor,\n  fontStrokeWidth,\n  groupPropName,\n  groupKeys,\n  groupLabels,\n  isHangingBar = true,\n  labelColorAccessor,\n  labelFont = 'bold 1.1rem Arial',\n  labelFontSecondary = '0.9rem Arial',\n  nodes,\n  margin = { top: 60, right: 20, bottom: 10, left: 20 },\n  radiusToPaddingRatio = 0.8,\n  uniqueIdPropName,\n  wrapperStyle,\n}) {\n  // force pixel ratio to be 2 so we can map x/y back to color for tooltip\n  const canvasPixelRatio = 2;\n  const tooltipPadding = 3; // px\n\n  const [sizeRef, width, height] = useResizeObserver();\n\n  const [state, dispatch] = useReducer(stateReducer, {\n    isRendering: false,\n    nodeCount: 0,\n    tooltipContent: '',\n    tooltipContentWidth: 0,\n    tooltipOffset: [0, 0],\n    radiusWithPadding: 1,\n    radiusAccessor: () => (1),\n    xAccessor: () => (0),\n    xScale: () => (0),\n    yAccessor: () => (0),\n  });\n\n  // rebuild the layout when the dimensions, chart direction, or number of group keys changes\n  useEffect(() => {\n    // compute the layout\n    const {\n      radiusWithPadding,\n      radiusAccessor,\n      xAccessor,\n      xScale,\n      yAccessor,\n    } = computeLayout({\n      bandPaddingInner,\n      bandPaddingOuter,\n      isHangingBar,\n      groupIndexPropName,\n      groupKeys,\n      groupPropName,\n      margin,\n      nodeCount: nodes.length,\n      width,\n      height,\n      radiusToPaddingRatio,\n    });\n\n    // store the layout functions as state\n    dispatch({\n      type: 'SET_LAYOUT',\n      payload: {\n        nodeCount: nodes.length,\n        radiusWithPadding,\n        radiusAccessor,\n        xAccessor,\n        xScale,\n        yAccessor,\n        },\n    });\n  }, [width, height, groupKeys, isHangingBar, state.nodeCount]);\n\n  // index the nodes by group, which lets the layout place each node in a particular order\n  const {\n    colorToNode, // unique mapping of rgb() -> unique node\n    nodes: indexed,\n    groupCounts,\n    groupIndexPropName,\n    nodeIdToColor,\n  } = computeIndexedNodes({\n    groupPropName,\n    groupKeys,\n    nodes,\n    uniqueIdPropName,\n  });\n\n  // build a draw function that renders every node as a unique color\n  const eventCanvasDrawFunction = dotBarDrawFunction({\n    nodes: indexed,\n    // access the color that maps to a node\n    colorAccessor: (node) => (nodeIdToColor[node[uniqueIdPropName]] || ''),\n    radiusAccessor: () => (state.radiusWithPadding),\n    strokeColorAccessor: (node) => (nodeIdToColor[node[uniqueIdPropName]] || ''),\n    strokeWidth: 0,\n    xAccessor: state.xAccessor,\n    yAccessor: state.yAccessor,\n  });\n\n  // detect mouse movements and update the tooltip content\n  const mousemove = (e) => {\n    const event = e;\n\n    const hiddenCtx = event.target.getContext('2d');\n    const rgb = hiddenCtx.getImageData(\n      event.nativeEvent.offsetX * canvasPixelRatio,\n      event.nativeEvent.offsetY * canvasPixelRatio,\n      1,\n      1).data;\n\n    // find the node associated with the unique color\n    const node = colorToNode[`rgb(${rgb[0]},${rgb[1]},${rgb[2]})`];\n\n    if (node){\n      const renderProps = omit(node, [groupIndexPropName]);\n\n      // find the longest text width\n      const tooltipContentWidth = reduce(renderProps, (maxWidth, value, key) => {\n        // measure content width\n        hiddenCtx.font = labelFontSecondary;\n        const width = hiddenCtx.measureText(`${value}: ${key}`).width;\n        return width > maxWidth\n          ? width + (2 * tooltipPadding)\n          : maxWidth;\n      }, 0);\n\n      dispatch({\n        type: 'SET_TOOLTIP_CONTENT',\n        payload: {\n          tooltipContent: map(\n            renderProps,\n            (value, key) => (<p style={{ margin: '2px', textAlign: 'center' }} key={key}>{key}: {value}</p>)\n          ),\n          tooltipContentWidth,\n          tooltipOffset: [event.pageX, event.pageY],\n        }\n      });\n    } else {\n      dispatch({\n        type: 'SET_TOOLTIP_CONTENT',\n        payload: {\n          tooltipContent: '',\n          tooltipContentWidth: 0,\n          tooltipOffset: state.tooltipContent,\n        }\n      });\n    }\n  };\n\n  // render by calling the stateful layout functions\n  const dotBarDraw = dotBarDrawFunction({\n    nodes: indexed,\n    colorAccessor,\n    radiusAccessor: state.radiusAccessor,\n    strokeColorAccessor: () => (circleStrokeColor),\n    strokeWidth: circleStrokeWidth,\n    xAccessor: state.xAccessor,\n    yAccessor: state.yAccessor,\n  });\n  // render labels (top label is user defined, bottom is \"% (count)\"\n  const labelDraw = labelDrawFunction({\n    colorAccessor: labelColorAccessor || colorAccessor,\n    font: labelFont,\n    fontSecondary: labelFontSecondary,\n    fontStrokeColor,\n    fontStrokeWidth,\n    groupCounts,\n    groupKeys,\n    labels: groupLabels,\n    xAccessor: (group) => (\n      state.xScale(group) // start at left edge of bar\n      - state.xScale.step() * state.xScale.paddingOuter() // offset the outer left padding\n      + state.xScale.bandwidth() / 2 // add the half bandwidth to center the text\n    ),\n    yAccessor: () => (margin.top / 3),\n    numberOffset: margin.top / 3 + 5,\n  });\n  const drawFunction = (ctx) => {\n    dispatch({ type: 'START_RENDER' });\n    dotBarDraw(ctx);\n    labelDraw(ctx);\n    dispatch({ type: 'FINISH_RENDER' });\n  };\n\n  return <>\n    <ResponsiveCanvas\n      canvasPixelRatio={canvasPixelRatio}\n      canvasDrawFunction={drawFunction}\n      canvasStyle={canvasStyle}\n      eventCanvasStyle={eventCanvasStyle}\n      eventCanvasDrawFunction={eventCanvasDrawFunction}\n      height={height}\n      mousemove={mousemove}\n      width={width}\n      wrapperClassName={className}\n      wrapperSizeRef={sizeRef}\n      wrapperStyle={wrapperStyle}\n    />\n    <Tooltip\n      borderWidth={state.radiusWithPadding}\n      content={state.tooltipContent}\n      opacity={state.tooltipContent === '' ? 0 : 0.85}\n      contentWidth={state.tooltipContentWidth}\n      left={state.tooltipOffset[0]}\n      font={labelFontSecondary}\n      padding={tooltipPadding}\n      top={state.tooltipOffset[1]}\n    />\n    </>;\n};\n","import { isArray } from 'lodash-es';\nimport React, { useEffect, useReducer } from 'react';\nimport jobStateReducer from './jobStateReducer';\nimport useInterval from '../../hooks/useInterval';\nimport DotBarChart from '../DotBarChart/DotBarChart';\n\nexport default function JobStatusPoller({\n  canvasStyle,\n  circleStrokeColor,\n  circleStrokeWidth,\n  className,\n  colorPropName = 'color',\n  eventCanvasStyle,\n  fontStrokeColor,\n  fontStrokeWidth,\n  fetchMetadataPromise,\n  fetchNodesPromise,\n  groupPropName = 'status',\n  labelColorAccessor,\n  labelPropName = 'label',\n  labelFont = 'bold 1.1em Arial',\n  labelFontSecondary = '0.9em Arial',\n  margin = { top: 60, right: 20, bottom: 10, left: 20 },\n  pollingInterval = 500,\n  uniqueIdPropName,\n  wrapperStyle = { height: '100%', width: '100%' },\n}) {\n  const [state, dispatch] = useReducer(jobStateReducer, {\n    colorAccessor: () => ('#fff'),\n    groupMetadata: {},\n    groupKeys: [],\n    groupLabels: [],\n    nodes: [],\n  });\n\n  // fetch initial metadata and state\n  useEffect(() => {\n    async function fetchData() {\n      const { nodes } = await fetchNodesPromise();\n      dispatch({ type: 'SET_NODES', payload: nodes });\n\n      const { groupMetadataArray } = await fetchMetadataPromise();\n      dispatch({\n        type: 'SET_GROUP_METADATA',\n        // keyed by groupPropName\n        payload: {\n          colorPropName,\n          groupPropName,\n          groupMetadataArray,\n          labelPropName,\n        },\n      });\n    };\n    fetchData();\n  }, []);\n\n  // poll the \"server\" for new data\n  useInterval(() => {\n    fetchNodesPromise()\n      .then(({ nodes }) => {\n        dispatch({\n          type: 'SET_NODES',\n          payload: nodes,\n        });\n      })\n    },\n    pollingInterval);\n\n  return (!isArray(state.nodes) || !state.nodes.length)\n    ? ''\n    : <DotBarChart\n      canvasStyle={canvasStyle}\n      circleStrokeColor={circleStrokeColor}\n      circleStrokeWidth={circleStrokeWidth}\n      className={className}\n      colorAccessor={state.colorAccessor}\n      eventCanvasStyle={eventCanvasStyle}\n      fontStrokeColor={fontStrokeColor}\n      fontStrokeWidth={fontStrokeWidth}\n      groupPropName={groupPropName}\n      groupCounts={state.groupKeys.length}\n      groupKeys={state.groupKeys}\n      groupLabels={state.groupLabels}\n      labelColorAccessor={labelColorAccessor}\n      labelFont={labelFont}\n      labelFontSecondary={labelFontSecondary}\n      nodes={state.nodes}\n      margin={margin}\n      uniqueIdPropName={uniqueIdPropName}\n      wrapperStyle={wrapperStyle}\n    />;\n};\n","/** copied from https://overreacted.io/making-setinterval-declarative-with-react-hooks/ */\nimport { useEffect, useRef } from 'react';\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React, { useEffect, useReducer } from 'react';\n\nexport const stateReducer = (state, action) => {\n  switch(action.type) {\n    case 'SET_TITLE':\n      return { ...state, titleString: action.payload };\n    default:\n      throw new Error('Invalid action type in Title.stateReducer()');\n  }\n};\n\nexport default function Title({\n  className,\n  fetchTitlePromise,\n}) {\n  const [state, dispatch] = useReducer(stateReducer, {\n    titleString: '',\n  });\n\n  // fetch initial metadata and state\n  useEffect(() => {\n    async function fetchData() {\n      dispatch({ type: 'SET_TITLE', payload: await fetchTitlePromise() });\n    };\n    fetchData();\n  }, []);\n\n  return <h2 className={className}>{state.titleString}</h2>;\n};\n","/* globals fetch:false */\nimport 'whatwg-fetch';\nimport { keys, reduce } from 'lodash-es';\n\nfunction slug(params) {\n  return reduce(keys(params), (acc, key, i) => {\n    return `${acc}${i ? '&' : '?'}${key}=${params[key]}`;\n  }, '');\n}\n\nexport default async function fetchJSON({ url, params = {} }) {\n  try {\n    const response = await fetch(\n      `${url}${slug(params)}`,\n      { headers: { Accept: 'application/json' }, credentials: 'same-origin' },\n    );\n    if (response.ok) {\n      return response.json();\n    }\n    return `Response.status: ${response.status}`;\n  } catch (e) {\n    throw e;\n  }\n}\n","import fetchJSON from '../../utils/fetch';\nimport { isNil, toArray } from 'lodash-es';\n\nexport const fetchNodeMetadata = async ({ url }) => {\n  const { job_statuses_dict: meta } = await fetchJSON({ url });\n  const jobStatusMetaData = Array.isArray(toArray(meta))\n    ? toArray(meta)\n      .map(({ label, id: status, ...rest }, i) => ({\n        sort_order: i, // add a sort order if it doesn't exist\n        color: 'gray',\n        ...rest, // but default to a specified sort order\n        status,\n        label,\n      }))\n      .sort((a, b) => (a.sort_order - b.sort_order))\n    : [];\n\n  return { groupMetadataArray: jobStatusMetaData };\n};\n\nexport const fetchNodes = async ({ url }) => {\n const { jobs } = await fetchJSON({ url });\n  if (!jobs) {\n    return [];\n  }\n\n   // first row is header names\n  const keys = jobs.shift();\n  // key remaining rows by header names\n  const nodes = jobs.map((values) => {\n    return values.reduce((acc, val, i) => {\n      return { ...acc, [keys[i]]: val };\n    }, {});\n  });\n\n  return { nodes };\n};\n\nexport const fetchTitle = async ({ url, job_id }) => {\n  // no job_id\n  if (isNil(job_id)) { return 'No job id specified.'; }\n\n  const { workflow_dcts } = await fetchJSON({ url });\n  if (isNil(workflow_dcts)) { return 'No workflow metadata specified.'; }\n\n  const jobMetadata = workflow_dcts.find((job) => (job.dag_id === job_id));\n\n  // job_id not in metadata\n  if (!jobMetadata) { return 'Job id not found'; }\n\n  const workflowName = jobMetadata.workflow_args || 'unnamed workflow';\n  const workflowUser = jobMetadata.user || 'unknown user';\n\n  return `Status of ${workflowName} initiated by ${workflowUser}`;\n};\n\n","import React from 'react';\nimport JobStatusPoller from '../../components/JobStatusPoller/JobStatusPoller';\nimport Title from '../../components/Title/Title';\nimport { fetchNodes, fetchNodeMetadata, fetchTitle } from './fetchFromApi';\nimport { isNil } from 'lodash-es';\n\nexport default function ApiJobStatus({\n  className,\n  match,\n  baseUrl,\n  port\n}) {\n  const job_id = match.params.job_id ? Number(match.params.job_id) : null;\n  const groupPropName = 'status';\n  const urlString = port ? `${baseUrl}:${port}` : baseUrl;\n\n  // title with user name and workflow arguments\n  const fetchTitlePromise = fetchTitle.bind(null, {\n    job_id,\n    url: `${urlString}/workflow`,\n  });\n\n  // metadata for nodes, including labels, sort order, colors\n  const fetchMetadataPromise = fetchNodeMetadata.bind(null, {\n    url: `${urlString}/job_status`,\n  });\n\n  // actual array of nodes\n  const fetchNodesPromise = fetchNodes.bind(null, {\n    groupPropName: 'status',\n    url: `${urlString}/workflow/${job_id}/job_display_details`,\n  });\n\n  const title =\n    <Title\n      className=\"Job-status-title\"\n      fetchTitlePromise={fetchTitlePromise}\n    />;\n  const jobStatusComponent =\n    <div className=\"Job-status-graph-container\">\n      <JobStatusPoller\n        colorPropName=\"color\"\n        className=\"Job-status-graph\"\n        fetchMetadataPromise={fetchMetadataPromise}\n        fetchNodesPromise={fetchNodesPromise}\n        groupPropName={groupPropName}\n        labelFont=\"700 1.1rem Nunito\"\n        labelFontSecondary = \"700 0.9rem Nunito\"\n        labelPropName=\"label\"\n        margin={{ top: 60, right: 20, bottom: 20, left: 20 }}\n        pollingInterval={5000}\n        uniqueIdPropName=\"id\"\n        wrapperStyle={{ height: '80%', width: '80%' }}\n      />\n    </div>;\n\n  return isNil(job_id)\n    ? <div className={className}>{title}</div>\n    : <div className={className}>\n      {title}\n      {isNil(job_id) ? '' : jobStatusComponent}\n    </div>;\n};\n\n","export const getFakeProgress = (nodes, groupKeys, groupPropName) => {\n  const numberToAdvance = Math.floor(Math.random() * 50);\n  const indicesToAdvance = (new Array(numberToAdvance))\n    .fill(0).map(() => (Math.floor(Math.random() * nodes.length)));\n  // copy nodes and move some of them forward\n  return nodes.map((node, index) => {\n    if (indicesToAdvance.includes(index)) {\n      const groupIndex = groupKeys.findIndex((key) => (key === node[groupPropName]));\n      let nextGroupIndex = groupIndex;\n      if (groupKeys[groupIndex] === 'E') { // RECOVERABLE\n        nextGroupIndex = 1;\n      } else if (groupKeys[groupIndex] === 'F') { // FATAL\n          nextGroupIndex = groupIndex;\n      } else if (groupKeys[groupIndex] === 'R') { // RUNNING\n        const randomErrorState = Math.random() <= 0.05 ? groupIndex + 2 : groupIndex + 1;\n        nextGroupIndex = (Math.random() <= 0.1)\n          ? randomErrorState\n          : groupKeys.length - 1;\n      } else {\n        nextGroupIndex = groupIndex < groupKeys.length - 2 ? groupIndex + 1 : groupKeys.length - 1;\n      }\n      return { ...node, [groupPropName]: groupKeys[nextGroupIndex] };\n    }\n    return { ...node }\n  });\n};\n\n","import React from 'react';\nimport JobStatusPoller from '../../components/JobStatusPoller/JobStatusPoller';\nimport Title from '../../components/Title/Title';\nimport { getFakeProgress } from './demoDataGenerator';\n\nconst defaultGroupMetadata = [\n  {\n    color: '#D6EAF8',\n    group_id: 'G',\n    label: 'REGISTERED',\n    sort_order: 1,\n  },\n  {\n    color: '#3498DB',\n    group_id: 'Q',\n    label: 'QUEUED',\n    sort_order: 2,\n  },\n  {\n    color: '#5DADE2',\n    group_id: 'I',\n    label: 'INSTANTIATED',\n    sort_order: 3,\n  },\n  {\n    color: '#ebd857',\n    group_id: 'R',\n    label: 'RUNNING',\n    sort_order: 4,\n  },\n  {\n    color: '#F1948A',\n    group_id: 'E',\n    label: 'RECOVERABLE',\n    sort_order: 5,\n  },\n  {\n    color: '#E74C3C',\n    group_id: 'F',\n    label: 'FATAL',\n    sort_order: 6,\n  },\n  {\n    color: '#2ECC71',\n    group_id: 'D',\n    label: 'DONE',\n    sort_order: 7,\n  },\n];\n\nexport default function DemoWorkflowStatus({\n  className = 'Job-status-graph',\n  match = {},\n  circleStrokeColor,\n  circleStrokeWidth,\n  colorPropName = 'color',\n  fontStrokeColor,\n  fontStrokeWidth,\n  groupMetadataArray,\n  labelColorAccessor,\n  labelFont = '700 1.1rem Nunito',\n  labelFontSecondary  = '700 0.9rem Nunito',\n  labelPropName = 'label',\n  margin = { top: 60, right: 20, bottom: 20, left: 20 },\n  pollingInterval = 1000,\n  uniqueIdPropName = 'unique_id',\n  wrapperStyle = { height: '80%', width: '80%' },\n}) {\n  const nNodes = (match.params && match.params.nNodes) ? Number(match.params.nNodes) : 1000;\n  const groupPropName = 'group_id';\n\n  // start with all nodes at first status\n  let nodes = (new Array(nNodes).fill({}))\n    .map((node, i) => ({\n      unique_id: `id_${i + 1}`,\n      group_id: 'G',\n      some_other_prop: 'with a very long name',\n    }));\n\n  const groupMetadata = groupMetadataArray || defaultGroupMetadata;\n  const groupKeys = defaultGroupMetadata.map((meta) => (meta[groupPropName]));\n\n  // title with user name and workflow arguments\n  const fetchTitlePromise = async () =>  (`Demo status with ${nNodes} jobs`);\n\n  // metadata for nodes, including labels, sort order, colors\n  const fetchMetadataPromise = async () => ({ groupMetadataArray: groupMetadata });\n\n  // actual array of nodes\n  const fetchNodesPromise = async () => {\n    nodes = getFakeProgress(nodes, groupKeys, groupPropName);\n    return { nodes };\n  };\n\n  const title =\n    <Title\n      className=\"Job-status-title\"\n      fetchTitlePromise={fetchTitlePromise}\n    />;\n  const jobStatusComponent =\n    <div className=\"Job-status-graph-container\">\n      <JobStatusPoller\n        circleStrokeColor={circleStrokeColor}\n        circleStrokeWidth={circleStrokeWidth}\n        fontStrokeColor={fontStrokeColor}\n        fontStrokeWidth={fontStrokeWidth}\n        labelColorAccessor={labelColorAccessor}\n\n        colorPropName={colorPropName}\n        className={className}\n        fetchMetadataPromise={fetchMetadataPromise}\n        fetchNodesPromise={fetchNodesPromise}\n        groupPropName={groupPropName}\n        labelFont={labelFont}\n        labelFontSecondary={labelFontSecondary}\n        labelPropName={labelPropName}\n        margin={margin}\n        pollingInterval={pollingInterval}\n        uniqueIdPropName={uniqueIdPropName}\n        wrapperStyle={wrapperStyle}\n      />\n    </div>;\n\n  return <div\n    className={className}>\n    {title}\n    {jobStatusComponent}\n  </div>;\n};\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport ApiJobStatus from './containers/ApiJobStatus/ApiJobStatus';\nimport DemoWorkflowStatus from './containers/DemoWorkflowStatus/DemoWorkflowStatus';\n\nexport default function App({\n  baseUrl = process.env.REACT_APP_API_BASE_URL,\n  port = process.env.REACT_APP_API_PORT,\n  routeName = process.env.REACT_APP_API_JOB_STATUS_ROUTE_NAME\n}) {\n  return (\n    <Router>\n      <Switch>\n        {[`/demo/:nNodes`, \"/demo\"].map((path) => (\n          <Route\n            key=\"demo\"\n            exact path={path}\n            render={(matchProps) => (\n              <DemoWorkflowStatus\n                {...matchProps} // contains params.match.nNodes\n                className=\"App\"\n              />\n            )}\n          />\n        ))}\n        {[`/${routeName}/:job_id`, \"\"].map((path, i) => (\n          <Route\n            key={i}\n            exact path={path}\n            render={(matchProps) => (\n              <ApiJobStatus\n                { ...matchProps } // contains params.match.job_id\n                className=\"App\"\n                baseUrl={baseUrl}\n                port={port}\n              />\n            )}\n          />\n        ))}\n      </Switch>\n    </Router>\n  );\n}\n"],"sourceRoot":""}